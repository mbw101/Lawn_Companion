package com.mbw101.lawn_companion.utils

import android.content.SharedPreferences
import androidx.preference.PreferenceManager
<<<<<<< HEAD
=======
import com.mbw101.lawn_companion.R
>>>>>>> origin/develop
import com.mbw101.lawn_companion.ui.MyApplication
import java.util.*

/**
Lawn Companion
Created by Malcolm Wright
Date: 2021-05-13
 */
class ApplicationPrefs {
    private val mPreferences: SharedPreferences = MyApplication.applicationContext().getSharedPreferences(
        Constants.APPLICATION_PREFS, 0
    )

    fun isNotFirstTime(): Boolean {
        return mPreferences.getBoolean(Constants.IS_FIRST_TIME, false)
    }

    fun setNotFirstTime(b: Boolean) {
        val mEditor = mPreferences.edit()
        mEditor.putBoolean(Constants.IS_FIRST_TIME, b).apply()
    }

    // functions for the preference screen
    // these functions will use getDefaultSharedPreferences, so we can't use mPreferences
    fun isInCuttingSeason(): Boolean {
<<<<<<< HEAD
        val preferences: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(MyApplication.applicationContext())
        return preferences.getBoolean("inSeason", true)
    }

    fun isNotificationsEnabled(): Boolean {
        val preferences: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(MyApplication.applicationContext())
        return preferences.getBoolean("notificationSwitch", true)
    }

    fun isDataUseEnabled(): Boolean {
        val preferences: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(MyApplication.applicationContext())
        return preferences.getBoolean("useData", true)
    }
<<<<<<< HEAD

    // TODO: Add functions for desiredCutDate in shared preferences
=======
>>>>>>> develop
=======
        return getBooleanPreferenceFromSharedPrefs(MyApplication.applicationContext().getString(R.string.cuttingSeasonKey))
    }

    fun isNotificationsEnabled(): Boolean {
        return getBooleanPreferenceFromSharedPrefs(MyApplication.applicationContext().getString(R.string.notificationPreferenceKey))
    }

    fun isDataUseEnabled(): Boolean {
        return getBooleanPreferenceFromSharedPrefs(MyApplication.applicationContext().getString(R.string.dataPreferenceKey))
    }

    fun isInTimeOfDay(): Boolean {
        val cal = Calendar.getInstance()
        val hourOfDay = cal.get(Calendar.HOUR_OF_DAY)
        when (hourOfDay) {
            in Constants.MORNING_HOUR_START_TIME..Constants.MORNING_HOUR_END_TIME -> {
                return areMorningsSelected()
            }
            in Constants.AFTERNOON_HOUR_START_TIME..Constants.AFTERNOON_HOUR_END_TIME -> {
                return areAfternoonsSelected()
            }
            in Constants.EVENING_HOUR_START_TIME..Constants.EVENING_HOUR_END_TIME -> {
                return areEveningsSelected()
            }
            else -> { // between NIGHT_HOUR_START_TIME downTo Constants.NIGHT_HOUR_END_TIME
                return areNightsSelected()
            }
        }
    }

    fun areMorningsSelected(): Boolean {
        return getBooleanPreferenceFromSharedPrefs(MyApplication.applicationContext().getString(R.string.morningTimeOfDayKey))
    }

    fun areAfternoonsSelected(): Boolean {
        return getBooleanPreferenceFromSharedPrefs(MyApplication.applicationContext().getString(R.string.afternoonTimeOfDayKey))
    }

    fun areEveningsSelected(): Boolean {
        return getBooleanPreferenceFromSharedPrefs(MyApplication.applicationContext().getString(R.string.eveningTimeOfDayKey))
    }

    fun areNightsSelected(): Boolean {
        return getBooleanPreferenceFromSharedPrefs(MyApplication.applicationContext().getString(R.string.nightTimeOfDayKey))
    }

    private fun getBooleanPreferenceFromSharedPrefs(preferenceKey: String): Boolean {
        val preferences: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(MyApplication.applicationContext())
        val defaultBooleanPreferenceValue = true
        return preferences.getBoolean(preferenceKey, defaultBooleanPreferenceValue)
    }
>>>>>>> origin/develop
}